CSCB58 Project File: Summer 2017

Team Member A
-------------
First Name: J	
Last Name: L
Student Number: 
UofT E-mail Address: 


Team Member B
-------------
First Name: Z H
Last Name: X
Student Number: 
UofT E-mail Address:
Project Details
---------------
Project Title: Two player blackjack

Project Description:
The game sets two player against each other in five rounds of blackjack, with an automated dealer that responds to the players' commands.
Dealer commands:
	- "stand" (not ask for another card)
	- "hit" (ask for another card in an attempt to get closer to a count of 21, or even hit 21 exactly)
Notable Scenarios:
	- "bust" (if total cards' face value is over 21): the player loses and does not collect points

Ace will represent 1 instead of standard blackjack rules
Each round of black jack would have players being able to choose to stand or hit.
With those options, when the player stands the current sum for the round gets added to your points total
however if the player hits and busts(going over 21) the player would get 0 points
When we draw a card that card is removed from a standard deck (IE there would be only 4 #1s in the deck 4 #2s in the deck...)
Therefore, a round ends when both players decide to stand the round or when that round busts.
After 5 rounds, the person with most points wins!

The plan is to display on a VGA screen:
	- Both players current score
	- The value(1-10,J,Q,K) of the card drawn (Ace will represent 1)
	- The total sum of the cards drawn for the round (34 max)
	- The round number
	- How many cards are in the deck(maybe)

Each round will have participating players choose to stand or hit; after participating players have decided
there will be a key to press that will check what players decided and either draw a card or go to the next round.
Video URL:https://www.youtube.com/watch?v=-mGswg__S2g


Code URL (please upload a copy of this file to your repository at the end of the project as well, it will
serve as a useful resource for future development):
https://github.com/PigwidgeonDeluxe/Verilog-BlackJack

Proposal
--------

What do you plan to have completed by the end of the first lab session?:

We plan to have finished the backend logic of how the blackjack game operates, such as the selection of the cards, a finite state machine to register 5 rounds,
a scoring system, and a fit resourced "deck" to draw from, and we can test certain elements by displaying them on a HEX display for now.

What do you plan to have completed by the end of the second lab session?:

By this session we hope to be able to display the game onto the VGA screen which includes
	- Both players current score
	- The value(1-10,J,Q,K) of the card drawn
	- The total sum of the cards drawn for the round (34 max)
	- The round number
	- How many cards are in the deck(maybe)

What do you plan to have completed by the end of the third lab session?:

We plan to fix any bugs/glitches and test out the game and make any fine tuning adjustments that can make the user experience better.
What is your backup plan if things don't work out as planned?

Assuming that we can get the back end to work, and if we cannot make the VGA display do what we want
then we will plan to cut some elements from the VGA board and then display the necessary elements such as player score and totals from the HEX display.

If the back end cannot work properly we may have to create a simpler game where players compete against each other with the highest card face value.
What hardware will you need beyond the DE2 board
VGA monitor
Motivations
-----------
How does this project relate to the material covered in CSCB58?:
This project will demonstrate good usage and understanding of materials taught in class such as adders, registers, and flip-flops, including being able to create a good FSM
that will allows the game to progress smoothly.
Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):
It is interesting because it implements pseudo-randomness to this project and graphics that no one else seems to have done too much of.
Why did you personally choose this project?:
This projects seems to be of optimal difficulty but will be really compelling to complete as it feels like a really fun project to do.
Attributions
------------
Provide a complete list of any external resources your project used (attributions should also be included in your
code).  
- Pseudorandom binary sequence modified from https://electronics.stackexchange.com/questions/30521/random-bit-sequence-using-verilog
	- NOTE: we ended up note using this
- tool used to convert bmp image to mif format http://www.eecg.utoronto.ca/~jayar/ece241_08F/vga/vga-bmp2mif.html 
- used VGA Adapter provided by Brian 

Updates
-------

Week 1: Planning of backend and frontend completed. Completed coding of backend, however have yet to test the backend. Research is done into pseudo-random number generation for the drawing of cards. A possible implementation example is found and modified for our use. Pseudo-random binary sequence modified from https://electronics.stackexchange.com/questions/30521/random-bit-sequence-using-verilog. 
Designing of frontend algorithms begins.

Week 2: Frontend VGA design is finished and programming and initial syntactical debugging is completed. The design of the VGA output is changed to a new, simpler, and more efficient design (ref: layout v2.jpg). The implementation of the "WinS" text is also scrapped until late as it is already cumbersome enough to manually hardcode the 17 characters required for drawui.v. The module for drawcharacter is completed and debugged, and tested to work with minimal errors. The module for drawui is tested for syntactical errors and checked to be synthesize-able but testing has not yet been done for overall implementation. Background of the VGA was also changed as a result. New background is staticbg.mono.mif and was created using a tool found online.

Week 3: drawui has been changed so that the reset only toggles when key[0] is pressed. Many alternatives have been tried, including updating the screen only when values are changed, but they all resulted in undesirable effects (ie graphical glitches and corruptions). Card values can now be displayed on screen correctly. Continued debugging of backend. One of the players behaves oddly.

Week 4: Backend mostly fixed with minimal errors, mostly logical. Frontend has the character Q changed so that screen updates work better. Ended up not using the cited pseudo random generator, and used a predetermined random card set. Switches were changed so that player 1 is Switch 0 and player 2 is switch 1.
